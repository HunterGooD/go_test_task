// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/HunterGooD/go_test_task/internal/domain/entity"
	interfaces "github.com/HunterGooD/go_test_task/internal/domain/interfaces"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// SongRepository is an autogenerated mock type for the SongRepository type
type SongRepository struct {
	mock.Mock
}

// CreateSong provides a mock function with given fields: ctx, group_id, songInput
func (_m *SongRepository) CreateSong(ctx context.Context, group_id int64, songInput *entity.SongRequest) (*entity.Song, error) {
	ret := _m.Called(ctx, group_id, songInput)

	if len(ret) == 0 {
		panic("no return value specified for CreateSong")
	}

	var r0 *entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *entity.SongRequest) (*entity.Song, error)); ok {
		return rf(ctx, group_id, songInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *entity.SongRequest) *entity.Song); ok {
		r0 = rf(ctx, group_id, songInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *entity.SongRequest) error); ok {
		r1 = rf(ctx, group_id, songInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteForceByGroupID provides a mock function with given fields: ctx, id
func (_m *SongRepository) DeleteForceByGroupID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteForceByGroupID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteForceByID provides a mock function with given fields: ctx, id
func (_m *SongRepository) DeleteForceByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteForceByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSoftByGroupID provides a mock function with given fields: ctx, id
func (_m *SongRepository) DeleteSoftByGroupID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSoftByGroupID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSoftByID provides a mock function with given fields: ctx, id
func (_m *SongRepository) DeleteSoftByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSoftByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *SongRepository) GetByID(ctx context.Context, id int64) (*entity.Song, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Song, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Song); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, song_name, group_id
func (_m *SongRepository) GetByName(ctx context.Context, song_name string, group_id int64) (*entity.Song, error) {
	ret := _m.Called(ctx, song_name, group_id)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (*entity.Song, error)); ok {
		return rf(ctx, song_name, group_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *entity.Song); ok {
		r0 = rf(ctx, song_name, group_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, song_name, group_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNames provides a mock function with given fields: ctx, song_name, group_name
func (_m *SongRepository) GetByNames(ctx context.Context, song_name string, group_name string) (*entity.Song, error) {
	ret := _m.Called(ctx, song_name, group_name)

	if len(ret) == 0 {
		panic("no return value specified for GetByNames")
	}

	var r0 *entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.Song, error)); ok {
		return rf(ctx, song_name, group_name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.Song); ok {
		r0 = rf(ctx, song_name, group_name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, song_name, group_name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListSong provides a mock function with given fields: ctx, offset, limit, with_deleted, filters
func (_m *SongRepository) GetListSong(ctx context.Context, offset int, limit int, with_deleted bool, filters *entity.SongFilters) ([]entity.Song, error) {
	ret := _m.Called(ctx, offset, limit, with_deleted, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetListSong")
	}

	var r0 []entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool, *entity.SongFilters) ([]entity.Song, error)); ok {
		return rf(ctx, offset, limit, with_deleted, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool, *entity.SongFilters) []entity.Song); ok {
		r0 = rf(ctx, offset, limit, with_deleted, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, bool, *entity.SongFilters) error); ok {
		r1 = rf(ctx, offset, limit, with_deleted, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReverseListSongs provides a mock function with given fields: ctx, offset, limit, with_deleted, filters
func (_m *SongRepository) GetReverseListSongs(ctx context.Context, offset int, limit int, with_deleted bool, filters *entity.SongFilters) ([]entity.Song, error) {
	ret := _m.Called(ctx, offset, limit, with_deleted, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetReverseListSongs")
	}

	var r0 []entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool, *entity.SongFilters) ([]entity.Song, error)); ok {
		return rf(ctx, offset, limit, with_deleted, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool, *entity.SongFilters) []entity.Song); ok {
		r0 = rf(ctx, offset, limit, with_deleted, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, bool, *entity.SongFilters) error); ok {
		r1 = rf(ctx, offset, limit, with_deleted, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSongTextByID provides a mock function with given fields: ctx, songID
func (_m *SongRepository) GetSongTextByID(ctx context.Context, songID int64) (string, error) {
	ret := _m.Called(ctx, songID)

	if len(ret) == 0 {
		panic("no return value specified for GetSongTextByID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (string, error)); ok {
		return rf(ctx, songID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, songID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, songID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Total provides a mock function with given fields: ctx, with_deleted, filter
func (_m *SongRepository) Total(ctx context.Context, with_deleted bool, filter *entity.SongFilters) (int, error) {
	ret := _m.Called(ctx, with_deleted, filter)

	if len(ret) == 0 {
		panic("no return value specified for Total")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, *entity.SongFilters) (int, error)); ok {
		return rf(ctx, with_deleted, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool, *entity.SongFilters) int); ok {
		r0 = rf(ctx, with_deleted, filter)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool, *entity.SongFilters) error); ok {
		r1 = rf(ctx, with_deleted, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFromMapByID provides a mock function with given fields: ctx, id, song, fields
func (_m *SongRepository) UpdateFromMapByID(ctx context.Context, id int64, song *entity.Song, fields map[string]any) error {
	ret := _m.Called(ctx, id, song, fields)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFromMapByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *entity.Song, map[string]any) error); ok {
		r0 = rf(ctx, id, song, fields)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTransaction provides a mock function with given fields: tx
func (_m *SongRepository) WithTransaction(tx *sqlx.Tx) interfaces.SongRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 interfaces.SongRepository
	if rf, ok := ret.Get(0).(func(*sqlx.Tx) interfaces.SongRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.SongRepository)
		}
	}

	return r0
}

// NewSongRepository creates a new instance of SongRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSongRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SongRepository {
	mock := &SongRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
