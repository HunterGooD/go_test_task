// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/HunterGooD/go_test_task/internal/domain/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// TransactionManagerSongsGroups is an autogenerated mock type for the TransactionManagerSongsGroups type
type TransactionManagerSongsGroups struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *TransactionManagerSongsGroups) Begin() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *TransactionManagerSongsGroups) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupRepository provides a mock function with given fields:
func (_m *TransactionManagerSongsGroups) GroupRepository() interfaces.GroupRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GroupRepository")
	}

	var r0 interfaces.GroupRepository
	if rf, ok := ret.Get(0).(func() interfaces.GroupRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.GroupRepository)
		}
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *TransactionManagerSongsGroups) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongRepository provides a mock function with given fields:
func (_m *TransactionManagerSongsGroups) SongRepository() interfaces.SongRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SongRepository")
	}

	var r0 interfaces.SongRepository
	if rf, ok := ret.Get(0).(func() interfaces.SongRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.SongRepository)
		}
	}

	return r0
}

// NewTransactionManagerSongsGroups creates a new instance of TransactionManagerSongsGroups. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionManagerSongsGroups(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionManagerSongsGroups {
	mock := &TransactionManagerSongsGroups{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
