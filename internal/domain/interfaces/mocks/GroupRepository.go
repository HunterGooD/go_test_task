// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/HunterGooD/go_test_task/internal/domain/entity"
	interfaces "github.com/HunterGooD/go_test_task/internal/domain/interfaces"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// GroupRepository is an autogenerated mock type for the GroupRepository type
type GroupRepository struct {
	mock.Mock
}

// DeleteForceByID provides a mock function with given fields: ctx, id
func (_m *GroupRepository) DeleteForceByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteForceByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteForceByName provides a mock function with given fields: ctx, name
func (_m *GroupRepository) DeleteForceByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteForceByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSoftByID provides a mock function with given fields: ctx, id
func (_m *GroupRepository) DeleteSoftByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSoftByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSoftByName provides a mock function with given fields: ctx, name
func (_m *GroupRepository) DeleteSoftByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSoftByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *GroupRepository) GetByID(ctx context.Context, id int64) (*entity.Group, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Group, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Group); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *GroupRepository) GetByName(ctx context.Context, name string) (*entity.Group, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Group, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Group); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFromMap provides a mock function with given fields: ctx, fields
func (_m *GroupRepository) UpdateFromMap(ctx context.Context, fields map[string]string) (*entity.Group, error) {
	ret := _m.Called(ctx, fields)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFromMap")
	}

	var r0 *entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) (*entity.Group, error)); ok {
		return rf(ctx, fields)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) *entity.Group); ok {
		r0 = rf(ctx, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTransaction provides a mock function with given fields: tx
func (_m *GroupRepository) WithTransaction(tx *sqlx.Tx) interfaces.GroupRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 interfaces.GroupRepository
	if rf, ok := ret.Get(0).(func(*sqlx.Tx) interfaces.GroupRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.GroupRepository)
		}
	}

	return r0
}

// NewGroupRepository creates a new instance of GroupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupRepository {
	mock := &GroupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
