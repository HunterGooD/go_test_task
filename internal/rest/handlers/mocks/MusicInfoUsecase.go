// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/HunterGooD/go_test_task/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// MusicInfoUsecase is an autogenerated mock type for the MusicInfoUsecase type
type MusicInfoUsecase struct {
	mock.Mock
}

// GetInfo provides a mock function with given fields: ctx, songInput
func (_m *MusicInfoUsecase) GetInfo(ctx context.Context, songInput *entity.SongRequest) error {
	ret := _m.Called(ctx, songInput)

	if len(ret) == 0 {
		panic("no return value specified for GetInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.SongRequest) error); ok {
		r0 = rf(ctx, songInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMusicInfoUsecase creates a new instance of MusicInfoUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMusicInfoUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MusicInfoUsecase {
	mock := &MusicInfoUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
